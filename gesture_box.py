from kivy.gesture import GestureDatabase
from kivy.uix.boxlayout import BoxLayout
from kivy.gesture import Gesture
from plyer import orientation
from kivy.app import platform
from kivy.graphics import Color, Ellipse, Line
from random import random

gesture_strings = {
    'W': 'eNqdWUtyHDkO3ddFrE0rSHyJC6i3E+EDTLhtha3oHlshqaenbz8gwKpkuiilZmpTNgoEgffwy9TNw+8P//779uv988ufT/enX8f3YzndfHmsp48fvn/61/2H0yP4P/0LT88fPzy/PP34/f7Z/0unmz8e+XSzNPIx1E6P0k2pn3/88fD9pR9r/Zi9cuwfXev0WNOD7sLffqTC6a7cMlATgIZVDIite/Of/iue7n7xn7lgw0bmX1ZBTs+/fXr7EopL+PQ17VP146WVKk1VqFv4+n/bjrirnm1Dq62IgkpFsQKTaUJCo+IBEUmDY9MtTNvFdFFFEEZGkyp1to21+Q9YGIrfcWgaAnaoZ9OlmagWU2tUpAhPpkEBWYurFAfrHbYhbGPadgulKBNXIMDmbvMMd1XrRqtg5cL12HhQCXwxXlurxQF311GrzpiUqs4DqoE61+9wPKgEvdgGKOxp0hRKdfeFNuNk1KCBITV0dI5tB5dgF9tYKoNIYa0mhHUyLVo6Fo45szt/aBuDTKybbWtKrYEaRVpMtplpxvsYFAw2cWMTyQFpxOqek02J4nXjBNQGqOBV295hO8jEjcxe7Fo9+ir9ltl4FXaBJ6OXq3t/bDvIxI3M6ierp1ux0qmbQHGDBav5zU09+Y/JxCATNzK9cBqAV7uTamg4Od6L1hsJO+iCUMoxnRR00kan5y41Y2neNLw2YW4qXk+eiiZ+sdvGdwBDQSjhpfQVSdGbBrSCLDYB40nfpmbI7dh4MEqXTlvQc1u8QIDQIW5TBXlDmdPF6LjXUnBKG6fF+6iJdxAntVS8ZLr/Imae+lD9Ws/V9g7Xg1SaSG2Nxf0HZZFWCl+MV0cLiwmrspN+jDkHpbxRWgUEVX0AYW+Ol1buvzib/5vjHITyVqHQm9VW/t56zsbBrPZRoQ6O6xxXKAefPFWoeWVDHz7KzqdeTCM2byg+fDxdnJB3TE4ONnljE3ulsKezlOZe2mbbHCxHqXhDRm+Px6aDS567baO5sWxcUnGSScRIvYqOvZagUjYqoXgukDc/Mu8wpclk2hnwOUEOmv9y7LYEkzJNTvVoSRmbdGxwSxNsfUe6pIkd2w4mZatM95SbnyTxmeCMbqZVPfG94LV4dbbjmSxBpFxWoNr7CHsW++DsAExEMnh3NGiKza9/h+kgUrYVqHqP2zbDtqV2H0uekOxUOpP1HZNNg0mt2+bmieETwod+q94TN9NVxVuVb0XVjR9XuwaNeumwaB72tLdthgtqR9jLRXt+H2efBot6YbHvOJW88xWoPoT0zUrvO/3np/v775cNXaWv6H7s5q5yvS2nO58i/vXyqO306SL0+ZJC2wnBk2j6iGu0Mmu0dmvzh7pG3WlAGPZleBJquuAjehIyLmzRrEGYx3gWIi2clNSA0ADNY5pC6kJnLIUDBQuhDqHNQslbLQOXuBUxbVqdhTVjtYxVurE7GLFaxioSQm7XTlvGKi00qOzR0K6RgWuEVa0uNDLwiMO/dKGRKGjcEpfNH+waCUmLmDrK1zYSn6ahQXCt4Qt7quQ11fbX1FBJ7KyESvkpkyxUEklLVwpfO+udKFUSk1ID7FoSS+vU3ZmtHORZo41jCZ/RTqizUFa2ErFIqVc0ErGosrVGDcCgyC6OGhj5DHgdoxoYAaQK8Mo2psoVDne+56z0Az3vw5kBZfgSiPkzXkp1QUYN/CDrroqOg5rSNKd1dTAQhKwj75bjoKU086zh4iAkbEqvlkSFxFDzetOVSmIYvco5WF6UGDZMlRWFkLBlQkOllUpimFkHvSxCmrBlhvkGtDqYGJqlykhNaLMUR9JAwIYlo+n9sUuxpDS7EuHiEqypoqmySg0MpDAT0p9Vhm1MaQYwGqZP2JRmQxMeUk5p+ixy3fQryk5loIQBgT9hzW21Yktp3UsTAshIRluvlBBAOqQDRMqoMe22YYFgJx0hUQaKeVvT6y7uT3Kpkjjb+WBGTWEuqLk+KDuVs88ZNeWEKaOkKKPOWtykGTUP3cU89WIOFXnDD048dAQwbHPi0VLaBieceFjdYccJQXY70JGWHBBQGUkCQxpR088TQk7RRq4TkAMPX8h/Di4S9rpuOZCiRKqn/ULFUmVU0WrKSMBGnNHDqvqlpopdO7ZsBRKA0lgIysp3CXT92f0am2WPksCdWk5UGxxJ4n69qsVMWzgWjPiefHWrP2uubtXUz1E/9j3fLEIK9Oqe4Qt+qliqlIWKBu6cVbjcRXyepEquPLSafwqpkh7SaIiKO+nIUg0MmXKc4mrKKadKhoajwjVhG7MPVrmridQYhMulKLdyzvr0pWClkrAJvL4U5ZLOgm+o1J0KLDaL3NlZ6A2VxDBX3VdU6NgK71QGP7nEX6TLIHRWqbJAq7VZZTwK1GazdLkEWZlDOy9BVnfS1TJhMKvIKiFtB5vSIjSjWaWNaWA8S88VbjJxCXVkso1sa7tdI7d7zqeg5VNGzfV+ZLI/t8ZByI2euZwHwNVwgdzoR+3A2J8hl3g+z6qzNCEYc62epaP6cjyN1QVyV+fcR1H4emhBbu4cxeizS8bBhCAHPrazudGa0tzFTZsaFhVZXJI7OkM+Vp59zh2dcy+h0V0g1/KzlOuQZtS52RCfLdDUQRcTpKvwrDKGJ1SZpXqW6k56vqTNUitDajvpwC236ot0WMhFekjPrxEgd+eLFIcUd9KzhTlQHokKwDvp2YLspCMLQXdSG9I5tuSnS20nHXax7KSDLtzFBjyku9hgoIO72MYuDriLDYZnfdvNFzPf7h++fnvpf4H19dYXmO6ki/96+PLyLaTac4pS+vLjj/unT98/x19sfcXt79y6fLwz+ufj048vf35Oa3a6k1tl7u/vVbyxl/4W8bfb/wJgqQ9i',
    'C': 'eNq1WNtSIzcQfZ8fgZdQ6pta+gHymio+IMWCC6jdgAt7k+zfR+oWMxIe70Cllhfj49aR+pzuHtmXT1+f/v5x9bA7HL+/7qbf2+s+TJf3e5huLp5v/9pdTHss/5YXmg43F4fj68vX3aG85eny216my1WSGwub9rFSaVm/f3l6PtZlqS7LZ5b9UaOmPfgJ6hF+lCWA03W4kig5S4iiKbNSrqf5t35K9VOIkVPiFBMjBEGdDl9uf74J2yYyPTR+ReSFP02HB6cOCQFopoa0TW1pg25TU6K4UCNuUyejzhvUvxXuCJGiAIF9lrYVQZMd4QPcqhjhU9xo3DRzs/bceeEGIoGFW7flRnMSFycRz3FnTKnTRLa5zUqcrSy5Jg1r3EjFzY5720s0L3H2kpkBF27tuBVCp8kHzk3mJc1eUoLYcWfuyHOGvlC2uc1Lmr0siXPXmd25CVj7OtmmNitpthIlnjs2jXpvlyCZlTRbiWHk7qh5KBON29xmJc1WAp5rnc9zs1nJs5Uhh34Q/j9us5JnKwMMQ7YW2kyOn+15NjO5mVnHRpnLwpl82MVCvLAHHNi3K5zNTtaZHUih1PIbex2mS4mPfb9Nbn5y/iXkYoYKzORYLA2LLtg357spvk1ujgot5BylJ+9PTlk/J7qYpbJYSoCDLrEbtmkY5B8YiGKWymIpKceOvauX8v6T01bMUsm/hDyapXGxlMNQ6h154DjM8u0+imZpXCwtpL2l0HVpCGl4emrepjdPo3T02p99LsfawNpfhTBuV0w0T6N+gB1QUncbquNhi9w8jYunXIpOu3JcuJMgLfdD2KRWc1Q3Ha1dNFJvH1vNUF0MpUz9sTvurPpJbnNTuw4VSavcNJ7birze8O9ed7vn+b5eHiLlwq46XV5zSFdhumah8nLcl5vZbQV1ALOD9Abm/o9LRAo1gnI+HwEe8RMOtIgEHiG2dSIDFQeQDYw6gOIgDWA0UMZIdXDktMSLfAOYHQw9mD1XhF6i7OlB2yg46BmBb8TqoGcU2EF20DLCpg5lBy0jbIJgctAyQo0OtuXqoC+3kxXQMsLo/sKK4jl7hB/ajnks39OCo04WpKHgqEsRoKGWIYr5Xm5yZVR1f9FCyEMsX4q5LfSE3QOKsaGeMeeRp1Q2ySq3i8FyGt/UhqBnQyi1kHQ2BN7yzGdD3qQAl82sL1a07cFlEzMB5WR9DXENo9mMzeYykd1SR99cAJfN2K8h6+ipWohrqMlDqC10pZIvTM1qcHGyFROUvVboUlft5Rm0FtK6xLwEXssRvWc4eAiusKB3EFspwZs3iF2vlvvaGrc3lHgS1EoJfUZIHtF+SAA1VdGnhL5DfUw0IWfU9Ugyoi5BGmOpTcUwom0SjgzkieZ3DOSTd8yCLLeVll50I/GQNKhJligjve+lEpJXPCH1+Hi6UfHw1Arypwf9xGbyZwm3YvH5BWxK+dy0EjpdyOAhcnqWNm7Lhh6Sz9cq0xDCK0mwqxv9hLLWY+zqxhUD6oA8pXTdo5zqHtv4YJfap3X5Wr+2q6sb8wpLqxd2dX1qQGxDSFxdXbF9DoHzIWklI3GplX2j1ZAitd8+HndPD4/H+rNe+apRZkm1q8D/PN0fHw0VH3zvUi4hx5dvu9fb57udhUW79FW8XZP+3L++3H+/c2qdruOV5FguL2UK55By/dXiy9V/bMUoIA==',
    'S': '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',
    'P': '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',
    'Refresh': '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'
}



gestures = GestureDatabase()
for name, gesture_string in gesture_strings.items():
    gesture = gestures.str_to_gesture(gesture_string)
    gesture.name = name
    gestures.add_gesture(gesture)



class GestureBox(BoxLayout):
    def __init__(self, **kwargs):
        for name in gesture_strings:
            self.register_event_type('on_{}'.format(name))
        super(GestureBox, self).__init__(**kwargs)

    def on_W(self):
        pass

    def on_C(self):
        pass
    
    def on_S(self):
        pass
    
    def on_P(self):
        pass
    
    def on_Refresh(self):
        pass
    def on_touch_down(self, touch):
        #create an user defined variable and add the touch coordinates 
        
        touch.ud['gesture_path'] = [(touch.x, touch.y)]    
        super(GestureBox, self).on_touch_down(touch)
        if platform == "android":
            orientation.set_sensor(mode='any')

    def on_touch_move(self, touch):
        try:
            touch.ud['gesture_path'].append((touch.x, touch.y))
            super(GestureBox, self).on_touch_move(touch)
        except:
            pass

    def on_touch_up(self, touch):
        try:
            touch.ud['line'].points = []
        except:
            pass
        if 'gesture_path' in touch.ud:
            #create a gesture object
            gesture = Gesture()    
            #add the movement coordinates 
            gesture.add_stroke(touch.ud['gesture_path'])
            #normalize so thwu willtolerate size variations
            gesture.normalize()
            #minscore to be attained for a match to be true
            match = gestures.find(gesture, minscore=0.8)
            if match:
                print("{} happened".format(match[1].name))
                self.dispatch('on_{}'.format(match[1].name))
        super(GestureBox, self).on_touch_up(touch)
